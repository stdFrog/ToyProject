HSV 모델은 이번에 처음 공부한다.

관련 레퍼런스와 국외 자료를 찾아보면 다음과 같이 설명하고 있다.
HSV 모델은 그래픽 사이언스 분야에서 주로 사용되는 기본 모델로써,
정육면체 공간좌표로 표시하는 RGB 색상 모델을 H(Hue), S(Saturation), V(Value) 3요소로 표현하는 모델이다.

HSV는 원기둥으로 이루어진 색 공간을 가지며 RGB의 색상 좌표계를 원기둥 도형의 좌표계로 변형하는 방법에 따라 그 모델이 나뉜다.


빛의 삼원색 곧, RGB는 기본색과 빛을 합쳐 표현하는 색상 모델이고 HSV는 인간이 색을 지각하는 방식을 응용한 모델이다.
외에도 CMYK라는 빛의 파장을 제거하여 색상을 보다 사실적으로 표현하는 모델이 있는데, 보통 프린터와 같은 인쇄/출력 등의 동작을 하는 디바이스가 이를 기본으로 한다.

Hue는 색조를 말하는데 붉은색, 푸른색 등의 색의 계열 따위를 의미한다.
HSV 모델은 이 주요 색조로부터 선형 조합을 통해 노랑, 보라, 남색 등의 여러 가지 색상을 가지는 연속적인 공간이다.

나중에 설명하겠지만 Saturation과 Value는 간단히 말해 밝기와 색의 강도(진한 정도)라 볼 수 있다.

여기선 실린더 즉, 원기둥 공간을 가지는 HSV 모델에 대해 설명한다.

모델에 따라 변환 공식이 서로 다르며 HSL 등의 원뿔 도형을 기본으로 하는 색 공간에선
그 도형이 가지는 요소 역시 다르므로 필요할 때 추가적으로 알아보기 바란다.

일단, RGB -> HSV로의 변환 공식을 살펴보자.
국외 백과를 찾아보면 다음과 같은 변환 공식이 성립한다고 나와있다.

Conversion RGB -> HSV

H = max = max(R,G,B),	min = min(R,G,B)
S = (max - min) / max	(or S = 0, if V = 0)
H = 60 *	(1) 0 + (G - B) / (max - min),	if(max = R)
			(2) 2 + (B - R) / (max - min),	if(max = G)
			(3) 4 + (R - G) / (max - min),	if(max = B)

H = H + 360,	if(H < 0)

C = S * V

여기서 C(Chroma)란 차이값을 의미하는데 정확히는 HSL 모델과 HSV 모델의 마지막 요소
Lightness(밝기), Value(명도)를 플로팅하여 도출되는 원뿔 형태의 색 공간에서 사용되는 값(반지름)이라고 한다.

곧, 색 공간을 이루던 기본 도형이 변하면서 요소 역시 역할과 의미가 적절히 변환된 것이라 볼 수 있다.

그렇다면 이 모델을 사용하는 이유는 무엇일까?
이유는 간단한데, 표현 방식이 RGB와 다르기 때문이다.

더 정확히는, RGB의 경우 색이 점진적으로 바뀌는 그라디언트 또는 애니메이션 등의 효과를 구현하기가 어렵다.
반면, HSV는 음영 효과(그림자), 채도의 변화(원거리 물체를 흐리게 만드는 등)를 표현하기 쉽다.

때문에 그래픽 분야에서 가장 흔히 사용되는 모델이며 기본이라 볼 수 있다.


다시 돌아와서, 크로마를 구하는 공식이 성립하는 이유를 알아보자.
이후에 좌표 변환 공식의 원리에 대해서도 살펴볼 것이다.

S = (max - min) /max 일 때, V가 max를 가진다면 다음 공식으로 변환할 수 있다.
S = (V - min) / V

여기서 순수 차이값만을 구하고자 한다면 S에 V를 곱하여 구할 수 있다.

C = S * V = (V - min) / V * V
C를 이용하면 min값도 찾을 수 있는데 다음 공식을 보자.

min = max - C
이는 단순히 정렬해보기만 하면 금방 알 수 있다.

C + min = max - min + min
-> C + min = max

크로마는 이 모델에서 사용되지 않지만 S(Saturation)를 구하는 방법에는 별 차이가 없으므로 겸사겸사 알아본 것이다.

이번엔 변환 공식의 원리에 대해 알아보자.
먼저, RGB에서 HSV로 변환할 때인데 여기서 주의할 것이 있다.

HSV로의 변환은 R,G,B 중 어떤 색이 최대값이냐에 따라 계산식에 서로 다른 상수 값이 추가된다는 점이다.
또, 도형의 형태에 따라 그 범위가 한정되어 있으므로 H가 가지는 유효 범위도 생각해봐야 한다.

색조, 즉 Hue는 빛의 삼원색(RGB)으로부터 좌표계를 변환하여 표현하는 것이므로 요소의 개수는 그대로이다.
따라서 다음과 같은 방법으로 각 요소가 가지는 최대 범위를 한정지을 수 있다.

360 / 3 = 120							{ For Each H = Range(120) }
이건 별 저항없이 받아들일 수 있는 얘기이며 모두 동의할 것이다.

이번엔 R[0,255]이 HSV 모델로 변환될 때 가져야 하는 범위를 계산해보자.

H =	60 * (0 + (G - B) / (R - min)),		{ max(R,G,B) = R & (G > B) } 
위 식은 RGB중 R의 값이 최대라고 가정했을 때 그 범위를 책정한 것이다. 
이를, G가 B보다 크다는 가정하에 단순히 수치로 나타내면 다음과 같다.

H = 60 * (0 + (1 - 0) / (1 - 0))
곧, H는 60이 되는데 이는 R이 가지는 범위의 최대값을 의미한다.
이어서 G가 B보다 작을 때 식으로 나타내어 보자.

H = 60 * (0 + (0 - 1) / (1 - 0))
위 식으로부터 H의 값은 -60이 되고 곧, 최소 범위가 -60이라는 것을 알 수 있다.
정리해보면, R[-60, 60)이고 이를 비로 나타내면 R[-1, 1)임을 알 수 있다.

왜 비로 나타내는가 하면, HSV와 RGB의 표현 방식에 차이가 있기 때문인데
수학적 계산이 편리한 HSV의 구조에 맞춰 단순히 수치화 했다고 생각하면 된다.

굳이 풀어써보면, { R,G,B | [0, 255] } 로 표현하던 것을 { R,G,B | For Each {R, G, B} * OneOver = [0,1] }로 변환한 것이며
식으로 써보면, R(187)일 때 OneOver(1 / 255)를 곱하여 0.7333... 따위로 나타낸다.

변환 공식은 별로 어렵지 않으며, 공식에서 사용되는 상수 60과 0, 2, 4 따위의 값이 왜 필요한지도 쉽게 예상할 수 있다.
상수 60은 색조가 가지는 총 범위를 절반한 것이고 서로 다른 상수 0, 2, 4는 구역을 구분짓기 위한 정수 상수임을 알 수 있다.
즉, 동일한 논리의 공식으로부터 G와 B의 범위를 산정하기 위해 쓰인다.

다시, G가 가장 크다는 가정하에 식을 하나 살펴보자(단, 식을 간단히 하기 위해 상수 60은 곱하지 않기로 한다).

H = 2 + (B - R) / (G - min)				{ max(R,G,B) = G & (R > B) }
값으로 표현하면 다음과 같이 쓸 수 있다.

H = 2 + (0 - 1) / (1 - 0)
-> H = 1

따라서, G가 가지는 최소 범위는 1아며 최대 범위를 구해서 정리해보면 [1, 3)의 범위를 가진다는 것을 알 수 있다.
같은 원리로 B의 범위는 [3, 5)이며 정리하면, H의 전체 범위는 [-1, 5)와 같다.

부등식(-1 <= x < 5)으로부터 정수의 개수를 따져보면 5 - (-1) = 6.
따라서, 60 * 6 = 360이고 H가 300보다 클 때 H′ = H / 60과 같다.

H가 300보다 작다면 H′의 범위는 위에서 정리한 전체 범위중 하나가 된다.

더 디테일한 설명은 굳이 추가하지 않기로 한다.
매우 중요한 내용은 없다고 판단되며 H가 가지는 값이 단순한 인덱스의 의미를 가진다 정도만 구분하면 된다.
